PARSER_BEGIN(Compiler)

public class Compiler
{
    public static void main(String args[]) throws ParseException
    {
        Compiler parser = new Compiler(System.in);
        Compiler.Program();
    }
}

PARSER_END(Compiler)

SKIP:
{
    " "
}

TOKEN:
{
    < IDENTIFIER : (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* >
    | < INTEGERLITERAL : (["0"-"9"])+ >
}

void Program() : {}
{
    ImportDeclaration() ClassDeclaration() <EOF>
}

void ImportDeclaration() : {}
{
    (
        "import" <IDENTIFIER> ("." <IDENTIFIER>)* ";"
    )*
}

void ClassDeclaration() : {}
{
    "class" <IDENTIFIER> ("extends" <IDENTIFIER>)? "{" (VarDeclaration())* (MethodDeclaration())* "}"
}

void VarDeclaration() : {}
{
    Type() <IDENTIFIER> ";"
}

void MethodDeclaration() : {}
{
    "public" MethodDeclaration1()
}

void MethodDeclaration1() : {}
{
    Type() <IDENTIFIER> "(" (
    Type() <IDENTIFIER> ("," Type() <IDENTIFIER>)* )?
    ")" "{" (VarDeclaration())* (Statement())*
    "return" Expression() ";" "}"
    | "static" "void" "main" "(" "String" "[" "]" 
    <IDENTIFIER> ")" "{" (VarDeclaration())* (Statement())* "}"
}

void Type() : {}
{
    "int" Type1()
    | "boolean"
    | <IDENTIFIER>
}

void Type1() : {}
{
    ("[" "]")?
}

void Statement() : {}
{
    "{" (Statement())* "}"
    | "if" "(" Expression() ")" Statement() "else" Statement()
    | "while" "(" Expression() ")" Statement()
    | Expression() ";"
    | <IDENTIFIER> Statement1()
}

void Statement1() : {}
{
    "=" Expression() ";"
    | "[" Expression() "]" "=" Expression() ";"
}

void Expression() : {}
{
    <INTEGERLITERAL> ExpressionLRFix()
    | "true" ExpressionLRFix()
    | "false" ExpressionLRFix()
    | <IDENTIFIER> ExpressionLRFix()
    | "this" ExpressionLRFix()
    | "new" Expression1()
    | "!" Expression() ExpressionLRFix()
    | "(" Expression() ")" ExpressionLRFix()
}

void Expression1() : {}
{
    "int" "[" Expression() "]" ExpressionLRFix()
    | <IDENTIFIER> "(" ")" ExpressionLRFix()
}

void ExpressionLRFix() : {}
{
    (("&&" | "<" | "+" | "-" | "*" | "/") Expression() ExpressionLRFix()
    | "[" Expression() "]" ExpressionLRFix()
    | "." ExpressionLRFix1())?
}

void ExpressionLRFix1() : {}
{
    "length" ExpressionLRFix()
    | <IDENTIFIER> "(" (Expression() (Expression())*)? ")" ExpressionLRFix()
}