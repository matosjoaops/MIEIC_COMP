PARSER_BEGIN(Compiler)

public class Compiler
{
    public static void main(String args[]) throws ParseException
    {
        Compiler parser = new Compiler(System.in);
        Compiler.Program();
    }
}

PARSER_END(Compiler)

TOKEN:
{
    < IDENTIFIER : (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* >
    | < INTEGERLITERAL : (["0"-"9"])+ >
}

void Program() : {}
{
    ImportDeclaration() ClassDeclaration() EOF
}

void ImportDeclaration() : {}
{
    (
        "import" IDENTIFIER ("." IDENTIFIER)* ";"
    )*
}

void ClassDeclaration() : {}
{
    "class" IDENTIFIER ("extends" IDENTIFIER)? "{" (VarDeclaration())* (MethodDeclaration())* "}"
}

void VarDeclaration() : {}
{
    Type() IDENTIFIER ";"
}

void MethodDeclaration() : {}
{
    "public" Type() IDENTIFIER "(" (
    Type() IDENTIFIER ("," Type() IDENTIFIER)* )?
    ")" "{" (VarDeclaration())* (Statement())*
    "return" Expression() ";" "}"
    | "public" "static" "void" "main" "(" "String" "[" "]" 
    IDENTIFIER ")" "{" (VarDeclaration())* (Statement())* "}"
} 

void Type() : {}
{
    "int" "[" "]"
    | "boolean"
    | "int"
    | IDENTIFIER
}

void Statement() : {}
{
    "{" (Statement())* "}"
    | "if" "(" Expression() ")" Statement() "else" Statement()
    | "while" "(" Expression() ")" Statement()
    | Expression() ";"
    | IDENTIFIER "=" Expression() ";"
    | IDENTIFIER "[" Expression() "]" "=" Expression() ";"
}

void Expression() : {}
{
    Expression() ("&&" | "<" | "+" | "-" | "*" | "/") Expression()
    | Expression() "[" Expression() "]"
    | Expression() "." "length"
    | Expression() "." IDENTIFIER "(" (Expression() (Expression())*)? ")"
    | INTEGERLITERAL
    | "true"
    | "false"
    | IDENTIFIER
    | "this"
    | "new" "int" "[" Expression() "]"
    | "new" IDENTIFIER "(" ")"
    | "!" Expression()
    | "(" Expression() ")"
}