options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calculator)

public class Calculator
{
    public static void main(String args[]) throws ParseException
    {
        System.out.println("Parser for a calculator that accepts expressions with integers, +,-,*,/,(, and ).");
        System.out.println("Write an arithmetic expression:");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression();

        if (root == null)
        {
            System.out.println("An error has occurred!");
            return;
        } 

        root.dump("");

        System.out.println(myCalc.eval(root));
    }

    int eval(SimpleNode node)
    {
        if (node.jjtGetNumChildren() == 0) return node.val;
        else if (node.jjtGetNumChildren() == 1) return this.eval((SimpleNode) node.jjtGetChild(0));

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0);
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);

        switch (node.id)
        {
            case CalculatorTreeConstants.JJTADD: return eval(lhs) + eval(rhs);
            case CalculatorTreeConstants.JJTSUB: return eval(lhs) - eval(rhs);
            case CalculatorTreeConstants.JJTMUL: return eval(lhs) * eval(rhs);
            case CalculatorTreeConstants.JJTDIV: return eval(lhs) / eval(rhs);
            default:
            {
                System.out.println("Ilegal operator!");
                System.exit(1);
            }
        }
        return 0;
    }
}

PARSER_END(Calculator)

SKIP:
{
    " " | "\r" | "\t"
}

TOKEN:
{
    < INTEGER: (["0" - "9"])+ >
    | < LF: "\n" >
}

JAVACODE
void error_skipto(String checkpoint) {
  ParseException e = generateParseException();  // generate the exception object
  System.out.println(e.toString());  // print the error message
  Token t;
  // consume tokens all the way up to a token of "kind" - use a do-while loop
  // rather than a while because the current token is the one immediately before
  // the erroneous token (in our case the token immediately before what should
  // have been "if"/"while".
  do {
    t = getNextToken();
  }
  while (!t.image.equals(checkpoint));
}

SimpleNode Expression(): {}
{
    try
    {
      Expr1(1) <LF> {return jjtThis;}    
    }
    catch (ParseException e)
    {
        System.out.println(e.toString());
        System.out.println("Invalid expression!");
        return null;
    }
}

void Expr1(int sign) #void : {}
{
    Expr2(sign) 
    [
        ("+" Expr2(sign) #Add(2) 
        | "-" Expr2(sign) #Sub(2))
    ]
}

void Expr2(int sign) #void : {}
{
    Expr3(sign) 
    [
        ("*" Expr3(sign) #Mul(2) 
        | "/" Expr3(sign) #Div(2))
    ]
}

void Expr3(int sign) #void : {Token t;}
{
    
    t=<INTEGER>
    {
        jjtThis.val = sign * Integer.parseInt(t.image);
    } #Term
    | "-" Expr3(-1)
    | try
        {
        "(" Expr1(sign) ")" 
        }
        catch (ParseException e)
        {
            System.out.println("Missing brackets!");
            throw e;
        }
}